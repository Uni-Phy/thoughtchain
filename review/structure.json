{
  "files": {
    "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go": {
      "path": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "imports": [
        "errors",
        "go.mongodb.org/mongo-driver/bson/primitive",
        "time",
        "api-server/internal/user-roles"
      ],
      "contents": "package org\n\nimport (\n\t\"errors\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"time\"\n\t\"api-server/internal/user-roles\"\n)\n\n// Domain errors\nvar (\n\tErrOrgNotFound      = errors.New(\"organization not found\")\n\tErrInvalidOrgData   = errors.New(\"invalid organization data\")\n\tErrOrgAlreadyExists = errors.New(\"organization already exists\")\n\tErrUserNotFound     = errors.New(\"user not found\")\n\tErrUserAlreadyInOrg = errors.New(\"user is already in organization\")\n)\n\n// Organization represents the organization entity\ntype Organization struct {\n\tID                    primitive.ObjectID `bson:\"_id,omitempty\" json:\"id\"`\n\tLegalName             string            `bson:\"legal_name\" json:\"legal_name\"`\n\tJurisdiction          string            `bson:\"jurisdiction\" json:\"jurisdiction\"`\n\tType                  string            `bson:\"type\" json:\"type\"`\n\tTaxID                 string            `bson:\"tax_id\" json:\"tax_id\"`\n\tPubliclyAvailableInfo string            `bson:\"publicly_available_info\" json:\"publicly_available_info\"`\n\tSocialMediaHandles    map[string]string `bson:\"social_media_handles\" json:\"social_media_handles\"`\n\tNumberOfEmployees     int               `bson:\"number_of_employees\" json:\"number_of_employees\"`\n\tCreatedAt             time.Time         `bson:\"created_at\" json:\"created_at\"`\n\tUpdatedAt             time.Time         `bson:\"updated_at\" json:\"updated_at\"`\n}\n\n// OrgUser represents the relationship between a user and an organization\ntype OrgUser struct {\n\tID           primitive.ObjectID `bson:\"_id,omitempty\" json:\"id\"`\n\tOrgID        primitive.ObjectID `bson:\"org_id\" json:\"org_id\"`\n\tUserID       primitive.ObjectID `bson:\"user_id\" json:\"user_id\"`\n\tRole         user_roles.RoleType `bson:\"role\" json:\"role\"`\n\tAssignedBy   primitive.ObjectID `bson:\"assigned_by\" json:\"assigned_by\"`\n\tAssignedAt   time.Time         `bson:\"assigned_at\" json:\"assigned_at\"`\n\tLastModified time.Time         `bson:\"last_modified\" json:\"last_modified\"`\n}\n\n// CreateOrgRequest represents the request to create a new organization\ntype CreateOrgRequest struct {\n\tLegalName             string            `json:\"legal_name\" validate:\"required,min=2\"`\n\tJurisdiction          string            `json:\"jurisdiction\" validate:\"required\"`\n\tType                  string            `json:\"type\" validate:\"required\"`\n\tTaxID                 string            `json:\"tax_id\" validate:\"required\"`\n\tPubliclyAvailableInfo string            `json:\"publicly_available_info\"`\n\tSocialMediaHandles    map[string]string `json:\"social_media_handles\"`\n\tNumberOfEmployees     int               `json:\"number_of_employees\" validate:\"min=1\"`\n}\n\n// CreateOrgResponse represents the response after creating an organization\ntype CreateOrgResponse struct {\n\tID        string    `json:\"id\"`\n\tLegalName string    `json:\"legal_name\"`\n\tCreatedAt time.Time `json:\"created_at\"`\n}\n\n// UpdateOrgRequest represents the request to update an organization\ntype UpdateOrgRequest struct {\n\tLegalName             *string            `json:\"legal_name,omitempty\" validate:\"omitempty,min=2\"`\n\tJurisdiction          *string            `json:\"jurisdiction,omitempty\"`\n\tType                  *string            `json:\"type,omitempty\"`\n\tTaxID                 *string            `json:\"tax_id,omitempty\"`\n\tPubliclyAvailableInfo *string            `json:\"publicly_available_info,omitempty\"`\n\tSocialMediaHandles    *map[string]string `json:\"social_media_handles,omitempty\"`\n\tNumberOfEmployees     *int               `json:\"number_of_employees,omitempty\" validate:\"omitempty,min=1\"`\n}\n\n// AssignUserRequest represents the request to assign a user to an organization\ntype AssignUserRequest struct {\n\tUserID string              `json:\"user_id\" validate:\"required\"`\n\tRole   user_roles.RoleType `json:\"role\" validate:\"required\"`\n}\n\n// UpdateUserRoleRequest represents the request to update a user's role in an organization\ntype UpdateUserRoleRequest struct {\n\tRole user_roles.RoleType `json:\"role\" validate:\"required\"`\n}\n\n// OrgUserResponse represents the response for organization user details\ntype OrgUserResponse struct {\n\tID         string              `json:\"id\"`\n\tUserID     string              `json:\"user_id\"`\n\tRole       user_roles.RoleType `json:\"role\"`\n\tAssignedAt time.Time          `json:\"assigned_at\"`\n}\n\n// Validate validates the create organization request\nfunc (r *CreateOrgRequest) Validate() error {\n\tif r.LegalName == \"\" || len(r.LegalName) \u003c 2 {\n\t\treturn errors.New(\"legal name is required and must be at least 2 characters\")\n\t}\n\tif r.Jurisdiction == \"\" {\n\t\treturn errors.New(\"jurisdiction is required\")\n\t}\n\tif r.Type == \"\" {\n\t\treturn errors.New(\"organization type is required\")\n\t}\n\tif r.TaxID == \"\" {\n\t\treturn errors.New(\"tax ID is required\")\n\t}\n\tif r.NumberOfEmployees \u003c 1 {\n\t\treturn errors.New(\"number of employees must be at least 1\")\n\t}\n\treturn nil\n}\n\n// Validate validates the update organization request\nfunc (r *UpdateOrgRequest) Validate() error {\n\tif r.LegalName != nil \u0026\u0026 len(*r.LegalName) \u003c 2 {\n\t\treturn errors.New(\"legal name must be at least 2 characters\")\n\t}\n\tif r.NumberOfEmployees != nil \u0026\u0026 *r.NumberOfEmployees \u003c 1 {\n\t\treturn errors.New(\"number of employees must be at least 1\")\n\t}\n\treturn nil\n}\n\n// Validate validates the assign user request\nfunc (r *AssignUserRequest) Validate() error {\n\tif r.UserID == \"\" {\n\t\treturn errors.New(\"user ID is required\")\n\t}\n\tif !user_roles.IsValidRole(r.Role) {\n\t\treturn errors.New(\"invalid role\")\n\t}\n\treturn nil\n}\n\n// Validate validates the update user role request\nfunc (r *UpdateUserRoleRequest) Validate() error {\n\tif !user_roles.IsValidRole(r.Role) {\n\t\treturn errors.New(\"invalid role\")\n\t}\n\treturn nil\n}\n"
    },
    "/Users/w0w/Documents/UniPhy/api-server/internal/org/handler.go": {
      "path": "/Users/w0w/Documents/UniPhy/api-server/internal/org/handler.go",
      "package": "org",
      "imports": [
        "net/http",
        "github.com/labstack/echo/v4",
        "api-server/pkg/logger",
        "go.mongodb.org/mongo-driver/mongo"
      ],
      "contents": "package org\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n\t\"api-server/pkg/logger\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n)\n\ntype Handler struct {\n\tservice Service\n}\n\nfunc NewHandler(db *mongo.Database) *Handler {\n\trepo := NewRepository(db)\n\tservice := NewService(repo)\n\treturn \u0026Handler{\n\t\tservice: service,\n\t}\n}\n\n// RegisterRoutes registers the organization routes\nfunc (h *Handler) RegisterRoutes(e *echo.Echo) {\n\tgroup := e.Group(\"/api/organizations\")\n\tgroup.POST(\"\", h.CreateOrganization)\n\tgroup.PUT(\"/:id\", h.UpdateOrganization)\n}\n\nfunc (h *Handler) CreateOrganization(c echo.Context) error {\n\tlogger.Log(logger.TypeInfo, \"Handling create organization request\", \"CreateOrganization\", \"handler.go\", \"org\", nil)\n\n\t// Parse and validate request\n\tvar req CreateOrgRequest\n\tif err := c.Bind(\u0026req); err != nil {\n\t\tlogger.Log(logger.TypeError, \"Failed to parse request\", \"CreateOrganization\", \"handler.go\", \"org\", err)\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Invalid request format\"})\n\t}\n\n\t// Call service layer\n\tresponse, err := h.service.CreateOrganization(c.Request().Context(), req)\n\tif err != nil {\n\t\tswitch err {\n\t\tcase ErrInvalidOrgData:\n\t\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Invalid organization data\"})\n\t\tcase ErrOrgAlreadyExists:\n\t\t\treturn c.JSON(http.StatusConflict, map[string]string{\"error\": \"Organization with this legal name already exists\"})\n\t\tdefault:\n\t\t\tlogger.Log(logger.TypeError, \"Failed to create organization\", \"CreateOrganization\", \"handler.go\", \"org\", err)\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\"error\": \"Failed to create organization\"})\n\t\t}\n\t}\n\n\tlogger.Log(logger.TypeInfo, \"Organization created successfully\", \"CreateOrganization\", \"handler.go\", \"org\", nil)\n\treturn c.JSON(http.StatusCreated, response)\n}\n\nfunc (h *Handler) UpdateOrganization(c echo.Context) error {\n\tlogger.Log(logger.TypeInfo, \"Handling update organization request\", \"UpdateOrganization\", \"handler.go\", \"org\", nil)\n\n\t// Get organization ID from path\n\tid := c.Param(\"id\")\n\tif id == \"\" {\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Organization ID is required\"})\n\t}\n\n\t// Parse and validate request\n\tvar req UpdateOrgRequest\n\tif err := c.Bind(\u0026req); err != nil {\n\t\tlogger.Log(logger.TypeError, \"Failed to parse request\", \"UpdateOrganization\", \"handler.go\", \"org\", err)\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Invalid request format\"})\n\t}\n\n\t// Call service layer\n\terr := h.service.UpdateOrganization(c.Request().Context(), id, req)\n\tif err != nil {\n\t\tswitch err {\n\t\tcase ErrInvalidOrgData:\n\t\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Invalid organization data\"})\n\t\tcase ErrOrgNotFound:\n\t\t\treturn c.JSON(http.StatusNotFound, map[string]string{\"error\": \"Organization not found\"})\n\t\tcase ErrOrgAlreadyExists:\n\t\t\treturn c.JSON(http.StatusConflict, map[string]string{\"error\": \"Organization with this legal name already exists\"})\n\t\tdefault:\n\t\t\tlogger.Log(logger.TypeError, \"Failed to update organization\", \"UpdateOrganization\", \"handler.go\", \"org\", err)\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\"error\": \"Failed to update organization\"})\n\t\t}\n\t}\n\n\tlogger.Log(logger.TypeInfo, \"Organization updated successfully\", \"UpdateOrganization\", \"handler.go\", \"org\", nil)\n\treturn c.NoContent(http.StatusOK)\n}\n"
    },
    "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go": {
      "path": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "imports": [
        "context",
        "fmt",
        "time",
        "go.mongodb.org/mongo-driver/bson",
        "go.mongodb.org/mongo-driver/mongo",
        "go.mongodb.org/mongo-driver/bson/primitive"
      ],
      "contents": "package org\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n)\n\ntype Repository interface {\n\tCreate(ctx context.Context, org *Organization) error\n\tFindByID(ctx context.Context, id primitive.ObjectID) (*Organization, error)\n\tFindByLegalName(ctx context.Context, legalName string) (*Organization, error)\n\tUpdate(ctx context.Context, id primitive.ObjectID, updates map[string]interface{}) error\n}\n\ntype repository struct {\n\tcollection *mongo.Collection\n}\n\nfunc NewRepository(db *mongo.Database) Repository {\n\treturn \u0026repository{\n\t\tcollection: db.Collection(\"Organizations\"),\n\t}\n}\n\nfunc (r *repository) Create(ctx context.Context, org *Organization) error {\n\t_, err := r.collection.InsertOne(ctx, org)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create organization: %w\", err)\n\t}\n\treturn nil\n}\n\nfunc (r *repository) FindByID(ctx context.Context, id primitive.ObjectID) (*Organization, error) {\n\tvar org Organization\n\terr := r.collection.FindOne(ctx, bson.M{\"_id\": id}).Decode(\u0026org)\n\tif err != nil {\n\t\tif err == mongo.ErrNoDocuments {\n\t\t\treturn nil, ErrOrgNotFound\n\t\t}\n\t\treturn nil, fmt.Errorf(\"failed to find organization by ID: %w\", err)\n\t}\n\treturn \u0026org, nil\n}\n\nfunc (r *repository) FindByLegalName(ctx context.Context, legalName string) (*Organization, error) {\n\tvar org Organization\n\terr := r.collection.FindOne(ctx, bson.M{\"legal_name\": legalName}).Decode(\u0026org)\n\tif err != nil {\n\t\tif err == mongo.ErrNoDocuments {\n\t\t\treturn nil, nil\n\t\t}\n\t\treturn nil, fmt.Errorf(\"failed to find organization by legal name: %w\", err)\n\t}\n\treturn \u0026org, nil\n}\n\nfunc (r *repository) Update(ctx context.Context, id primitive.ObjectID, updates map[string]interface{}) error {\n\tupdates[\"updated_at\"] = time.Now()\n\t\n\tresult, err := r.collection.UpdateOne(\n\t\tctx,\n\t\tbson.M{\"_id\": id},\n\t\tbson.M{\"$set\": updates},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to update organization: %w\", err)\n\t}\n\tif result.MatchedCount == 0 {\n\t\treturn ErrOrgNotFound\n\t}\n\treturn nil\n}\n"
    },
    "/Users/w0w/Documents/UniPhy/api-server/internal/org/service.go": {
      "path": "/Users/w0w/Documents/UniPhy/api-server/internal/org/service.go",
      "package": "org",
      "imports": [
        "context",
        "time",
        "go.mongodb.org/mongo-driver/bson/primitive",
        "api-server/pkg/logger"
      ],
      "contents": "package org\n\nimport (\n\t\"context\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"api-server/pkg/logger\"\n)\n\ntype Service interface {\n\tCreateOrganization(ctx context.Context, req CreateOrgRequest) (*CreateOrgResponse, error)\n\tUpdateOrganization(ctx context.Context, id string, req UpdateOrgRequest) error\n}\n\ntype service struct {\n\trepo Repository\n}\n\nfunc NewService(repo Repository) Service {\n\treturn \u0026service{repo: repo}\n}\n\nfunc (s *service) CreateOrganization(ctx context.Context, req CreateOrgRequest) (*CreateOrgResponse, error) {\n\t// Validate request\n\tif err := req.Validate(); err != nil {\n\t\tlogger.Log(logger.TypeError, \"Invalid organization data\", \"CreateOrganization\", \"service.go\", \"org\", err)\n\t\treturn nil, ErrInvalidOrgData\n\t}\n\n\t// Check if organization with same legal name exists\n\texistingOrg, err := s.repo.FindByLegalName(ctx, req.LegalName)\n\tif err != nil {\n\t\tlogger.Log(logger.TypeError, \"Error checking existing organization\", \"CreateOrganization\", \"service.go\", \"org\", err)\n\t\treturn nil, err\n\t}\n\tif existingOrg != nil {\n\t\tlogger.Log(logger.TypeError, \"Organization with same legal name already exists\", \"CreateOrganization\", \"service.go\", \"org\", nil)\n\t\treturn nil, ErrOrgAlreadyExists\n\t}\n\n\t// Create organization entity\n\tnow := time.Now()\n\torg := \u0026Organization{\n\t\tID:                    primitive.NewObjectID(),\n\t\tLegalName:             req.LegalName,\n\t\tJurisdiction:          req.Jurisdiction,\n\t\tType:                  req.Type,\n\t\tTaxID:                 req.TaxID,\n\t\tPubliclyAvailableInfo: req.PubliclyAvailableInfo,\n\t\tSocialMediaHandles:    req.SocialMediaHandles,\n\t\tNumberOfEmployees:     req.NumberOfEmployees,\n\t\tCreatedAt:             now,\n\t\tUpdatedAt:             now,\n\t}\n\n\t// Save to repository\n\tif err := s.repo.Create(ctx, org); err != nil {\n\t\tlogger.Log(logger.TypeError, \"Failed to create organization\", \"CreateOrganization\", \"service.go\", \"org\", err)\n\t\treturn nil, err\n\t}\n\n\t// Create response\n\tresponse := \u0026CreateOrgResponse{\n\t\tID:        org.ID.Hex(),\n\t\tLegalName: org.LegalName,\n\t\tCreatedAt: org.CreatedAt,\n\t}\n\n\tlogger.Log(logger.TypeInfo, \"Organization created successfully\", \"CreateOrganization\", \"service.go\", \"org\", nil)\n\treturn response, nil\n}\n\nfunc (s *service) UpdateOrganization(ctx context.Context, id string, req UpdateOrgRequest) error {\n\t// Validate request\n\tif err := req.Validate(); err != nil {\n\t\tlogger.Log(logger.TypeError, \"Invalid update data\", \"UpdateOrganization\", \"service.go\", \"org\", err)\n\t\treturn ErrInvalidOrgData\n\t}\n\n\t// Convert ID from string to ObjectID\n\torgID, err := primitive.ObjectIDFromHex(id)\n\tif err != nil {\n\t\tlogger.Log(logger.TypeError, \"Invalid organization ID format\", \"UpdateOrganization\", \"service.go\", \"org\", err)\n\t\treturn ErrInvalidOrgData\n\t}\n\n\t// Check if organization exists\n\texistingOrg, err := s.repo.FindByID(ctx, orgID)\n\tif err != nil {\n\t\tlogger.Log(logger.TypeError, \"Error finding organization\", \"UpdateOrganization\", \"service.go\", \"org\", err)\n\t\treturn err\n\t}\n\tif existingOrg == nil {\n\t\treturn ErrOrgNotFound\n\t}\n\n\t// Build updates map with only provided fields\n\tupdates := make(map[string]interface{})\n\t\n\tif req.LegalName != nil {\n\t\t// Check if new legal name is already taken by another organization\n\t\tif *req.LegalName != existingOrg.LegalName {\n\t\t\torg, err := s.repo.FindByLegalName(ctx, *req.LegalName)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Log(logger.TypeError, \"Error checking legal name\", \"UpdateOrganization\", \"service.go\", \"org\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif org != nil {\n\t\t\t\treturn ErrOrgAlreadyExists\n\t\t\t}\n\t\t}\n\t\tupdates[\"legal_name\"] = *req.LegalName\n\t}\n\tif req.Jurisdiction != nil {\n\t\tupdates[\"jurisdiction\"] = *req.Jurisdiction\n\t}\n\tif req.Type != nil {\n\t\tupdates[\"type\"] = *req.Type\n\t}\n\tif req.TaxID != nil {\n\t\tupdates[\"tax_id\"] = *req.TaxID\n\t}\n\tif req.PubliclyAvailableInfo != nil {\n\t\tupdates[\"publicly_available_info\"] = *req.PubliclyAvailableInfo\n\t}\n\tif req.SocialMediaHandles != nil {\n\t\tupdates[\"social_media_handles\"] = *req.SocialMediaHandles\n\t}\n\tif req.NumberOfEmployees != nil {\n\t\tupdates[\"number_of_employees\"] = *req.NumberOfEmployees\n\t}\n\n\t// Update in repository\n\tif err := s.repo.Update(ctx, orgID, updates); err != nil {\n\t\tlogger.Log(logger.TypeError, \"Failed to update organization\", \"UpdateOrganization\", \"service.go\", \"org\", err)\n\t\treturn err\n\t}\n\n\tlogger.Log(logger.TypeInfo, \"Organization updated successfully\", \"UpdateOrganization\", \"service.go\", \"org\", nil)\n\treturn nil\n}\n"
    }
  },
  "functions": {
    "org.AssignUserRequest.Validate": {
      "name": "AssignUserRequest.Validate",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "signature": "",
      "doc": "Validate validates the assign user request\n",
      "start_line": 124,
      "end_line": 132,
      "complexity": 0,
      "calls": [
        "errors.New",
        "user_roles.IsValidRole",
        "errors.New"
      ],
      "called_by": null
    },
    "org.CreateOrgRequest.Validate": {
      "name": "CreateOrgRequest.Validate",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "signature": "",
      "doc": "Validate validates the create organization request\n",
      "start_line": 93,
      "end_line": 110,
      "complexity": 0,
      "calls": [
        "errors.New",
        "errors.New",
        "errors.New",
        "errors.New",
        "errors.New"
      ],
      "called_by": null
    },
    "org.Handler.CreateOrganization": {
      "name": "Handler.CreateOrganization",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/handler.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 29,
      "end_line": 55,
      "complexity": 0,
      "calls": [
        "logger.Log",
        "c.Bind",
        "logger.Log",
        "c.JSON",
        "\u0026{h service}.CreateOrganization",
        "\u0026{%!s(*ast.SelectorExpr=\u0026{0xc0001af5a0 0xc0001af5c0}) %!s(token.Pos=6709) [] %!s(token.Pos=0) %!s(token.Pos=6710)}.Context",
        "c.Request",
        "c.JSON",
        "c.JSON",
        "logger.Log",
        "c.JSON",
        "logger.Log",
        "c.JSON"
      ],
      "called_by": null
    },
    "org.Handler.RegisterRoutes": {
      "name": "Handler.RegisterRoutes",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/handler.go",
      "package": "org",
      "signature": "",
      "doc": "RegisterRoutes registers the organization routes\n",
      "start_line": 23,
      "end_line": 27,
      "complexity": 0,
      "calls": [
        "e.Group",
        "group.POST",
        "group.PUT"
      ],
      "called_by": null
    },
    "org.Handler.UpdateOrganization": {
      "name": "Handler.UpdateOrganization",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/handler.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 57,
      "end_line": 91,
      "complexity": 0,
      "calls": [
        "logger.Log",
        "c.Param",
        "c.JSON",
        "c.Bind",
        "logger.Log",
        "c.JSON",
        "\u0026{h service}.UpdateOrganization",
        "\u0026{%!s(*ast.SelectorExpr=\u0026{0xc0001c0760 0xc0001c0780}) %!s(token.Pos=8151) [] %!s(token.Pos=0) %!s(token.Pos=8152)}.Context",
        "c.Request",
        "c.JSON",
        "c.JSON",
        "c.JSON",
        "logger.Log",
        "c.JSON",
        "logger.Log",
        "c.NoContent"
      ],
      "called_by": null
    },
    "org.NewHandler": {
      "name": "NewHandler",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/handler.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 14,
      "end_line": 20,
      "complexity": 0,
      "calls": null,
      "called_by": null
    },
    "org.NewRepository": {
      "name": "NewRepository",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 23,
      "end_line": 27,
      "complexity": 0,
      "calls": [
        "db.Collection"
      ],
      "called_by": null
    },
    "org.NewService": {
      "name": "NewService",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/service.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 19,
      "end_line": 21,
      "complexity": 0,
      "calls": null,
      "called_by": null
    },
    "org.UpdateOrgRequest.Validate": {
      "name": "UpdateOrgRequest.Validate",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "signature": "",
      "doc": "Validate validates the update organization request\n",
      "start_line": 113,
      "end_line": 121,
      "complexity": 0,
      "calls": [
        "errors.New",
        "errors.New"
      ],
      "called_by": null
    },
    "org.UpdateUserRoleRequest.Validate": {
      "name": "UpdateUserRoleRequest.Validate",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "signature": "",
      "doc": "Validate validates the update user role request\n",
      "start_line": 135,
      "end_line": 140,
      "complexity": 0,
      "calls": [
        "user_roles.IsValidRole",
        "errors.New"
      ],
      "called_by": null
    },
    "org.repository.Create": {
      "name": "repository.Create",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 29,
      "end_line": 35,
      "complexity": 0,
      "calls": [
        "\u0026{r collection}.InsertOne",
        "fmt.Errorf"
      ],
      "called_by": null
    },
    "org.repository.FindByID": {
      "name": "repository.FindByID",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 37,
      "end_line": 47,
      "complexity": 0,
      "calls": [
        "\u0026{%!s(*ast.SelectorExpr=\u0026{0xc0000135c0 0xc0001d60e0}) %!s(token.Pos=10034) [ctx %!s(*ast.CompositeLit=\u0026{0xc0000135f0 10046 [0xc0001c3020] 10056 false})] %!s(token.Pos=0) %!s(token.Pos=10057)}.Decode",
        "\u0026{r collection}.FindOne",
        "fmt.Errorf"
      ],
      "called_by": null
    },
    "org.repository.FindByLegalName": {
      "name": "repository.FindByLegalName",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 49,
      "end_line": 59,
      "complexity": 0,
      "calls": [
        "\u0026{%!s(*ast.SelectorExpr=\u0026{0xc0000136e0 0xc0001d6720}) %!s(token.Pos=10404) [ctx %!s(*ast.CompositeLit=\u0026{0xc000013710 10416 [0xc0001c3260] 10440 false})] %!s(token.Pos=0) %!s(token.Pos=10441)}.Decode",
        "\u0026{r collection}.FindOne",
        "fmt.Errorf"
      ],
      "called_by": null
    },
    "org.repository.Update": {
      "name": "repository.Update",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 61,
      "end_line": 76,
      "complexity": 0,
      "calls": [
        "time.Now",
        "\u0026{r collection}.UpdateOne",
        "fmt.Errorf"
      ],
      "called_by": null
    },
    "org.service.CreateOrganization": {
      "name": "service.CreateOrganization",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/service.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 23,
      "end_line": 71,
      "complexity": 0,
      "calls": [
        "req.Validate",
        "logger.Log",
        "\u0026{s repo}.FindByLegalName",
        "logger.Log",
        "logger.Log",
        "time.Now",
        "primitive.NewObjectID",
        "\u0026{s repo}.Create",
        "logger.Log",
        "\u0026{org ID}.Hex",
        "logger.Log"
      ],
      "called_by": null
    },
    "org.service.UpdateOrganization": {
      "name": "service.UpdateOrganization",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/service.go",
      "package": "org",
      "signature": "",
      "doc": "",
      "start_line": 73,
      "end_line": 141,
      "complexity": 0,
      "calls": [
        "req.Validate",
        "logger.Log",
        "primitive.ObjectIDFromHex",
        "logger.Log",
        "\u0026{s repo}.FindByID",
        "logger.Log",
        "\u0026{s repo}.FindByLegalName",
        "logger.Log",
        "\u0026{s repo}.Update",
        "logger.Log",
        "logger.Log"
      ],
      "called_by": null
    }
  },
  "types": {
    "org.AssignUserRequest": {
      "name": "AssignUserRequest",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "UserID",
        "Role"
      ],
      "methods": null,
      "implements": null
    },
    "org.CreateOrgRequest": {
      "name": "CreateOrgRequest",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "LegalName",
        "Jurisdiction",
        "Type",
        "TaxID",
        "PubliclyAvailableInfo",
        "SocialMediaHandles",
        "NumberOfEmployees"
      ],
      "methods": null,
      "implements": null
    },
    "org.CreateOrgResponse": {
      "name": "CreateOrgResponse",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "ID",
        "LegalName",
        "CreatedAt"
      ],
      "methods": null,
      "implements": null
    },
    "org.Handler": {
      "name": "Handler",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/handler.go",
      "package": "org",
      "doc": "",
      "fields": [
        "service"
      ],
      "methods": null,
      "implements": null
    },
    "org.OrgUser": {
      "name": "OrgUser",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "ID",
        "OrgID",
        "UserID",
        "Role",
        "AssignedBy",
        "AssignedAt",
        "LastModified"
      ],
      "methods": null,
      "implements": null
    },
    "org.OrgUserResponse": {
      "name": "OrgUserResponse",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "ID",
        "UserID",
        "Role",
        "AssignedAt"
      ],
      "methods": null,
      "implements": null
    },
    "org.Organization": {
      "name": "Organization",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "ID",
        "LegalName",
        "Jurisdiction",
        "Type",
        "TaxID",
        "PubliclyAvailableInfo",
        "SocialMediaHandles",
        "NumberOfEmployees",
        "CreatedAt",
        "UpdatedAt"
      ],
      "methods": null,
      "implements": null
    },
    "org.Repository": {
      "name": "Repository",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "doc": "",
      "fields": null,
      "methods": [
        "Create",
        "FindByID",
        "FindByLegalName",
        "Update"
      ],
      "implements": null
    },
    "org.Service": {
      "name": "Service",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/service.go",
      "package": "org",
      "doc": "",
      "fields": null,
      "methods": [
        "CreateOrganization",
        "UpdateOrganization"
      ],
      "implements": null
    },
    "org.UpdateOrgRequest": {
      "name": "UpdateOrgRequest",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "LegalName",
        "Jurisdiction",
        "Type",
        "TaxID",
        "PubliclyAvailableInfo",
        "SocialMediaHandles",
        "NumberOfEmployees"
      ],
      "methods": null,
      "implements": null
    },
    "org.UpdateUserRoleRequest": {
      "name": "UpdateUserRoleRequest",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/data.go",
      "package": "org",
      "doc": "",
      "fields": [
        "Role"
      ],
      "methods": null,
      "implements": null
    },
    "org.repository": {
      "name": "repository",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/repo.go",
      "package": "org",
      "doc": "",
      "fields": [
        "collection"
      ],
      "methods": null,
      "implements": null
    },
    "org.service": {
      "name": "service",
      "file": "/Users/w0w/Documents/UniPhy/api-server/internal/org/service.go",
      "package": "org",
      "doc": "",
      "fields": [
        "repo"
      ],
      "methods": null,
      "implements": null
    }
  }
}